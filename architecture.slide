Server Side Architecture Strategy for Begginers
- 社内初導入のAPIサーバーサイドアーキテクチャ設計戦略 - #gocon
25 Nov 2018
Tags: go golang architecture

Kazuki Higashiguchi
Server Side Enginner, BASE
higasgt@gmail.com
https://speakerdeck.com/higasgt
@higasgt

* Agenda

* Definition of Server Side Architecture

- Server Side Architectureとは
- なぜ必要なのか

* なぜ必要としたか

- パッケージ構成の検討
- 統一的な実装
- レイヤーの凝縮度
- ビジネスロジックの明確化
- ユニットテストの容易性

* 背景

- お金を扱う手堅いロジックを扱う、かつ機能をAPIで提供するため、堅くロジックが書けて、パフォーマンスがいいものが欲しいため、Go言語を技術スタックとして採用
- 当時のチーム状況は、Goを業務でがっつり使用した経験がないメンバー
- 新規事業につき業務要件も変わりうる

* 理想と現実

- 理想的には一発で正解を出したい
- 現実的には要件・スキル的な問題で正解が出せない

* 方針

- 作っては壊しを繰り返す
- 設計に対する補助材料としてユニットテストを書いていく
- ユニットテストを書くことで得られる設計に対するフィードバック
- 大胆なリファクタリングを可能とするユニットテストを準備する
- 身の丈×120%
- なるべく標準パッケージを利用し、実装した結果発生した課題に対して外部ライブラリを導入していく

* 初版

.code architecture/initial.txt

- controllerとmodelしかないシンプルな構成
- サンプルコードを用意してGoのAPI開発に慣れる
- interfaceを使用した抽象化はいったんせず密にmodel内にデータベースを扱うなどの技術的実装も含める

* 第二版

.code architecture/second.txt

- ドメイン層に存在していた技術的実装を分離する
- 抽象のレポジトリ層を挟み、技術的な実装はdatastoreパッケージに移動
- interfaceの使い方をここで慣れてもらい、ユニットテスト時には自前でモック実装を実装してもらい流れを掴む

* 第三版

.code architecture/third.txt

- 処理の複雑化に伴いservice パッケージを導入
: ここ制御役などの名前探す

- トランザクションを伴う処理実装に入る前にこれを入れておく必要があった。
- トランザクションをどう扱うかによって大幅な書換が発生する可能性がある。
- ユニットテスト時のモック量が増えてくるのに伴い、gomockの利用を開始する

: トランザクションを扱うためのコード例
: DI戦略の検討

* 現時点

- 現時点でのフォルダ構成

.code architecture/final.txt

* 反省点

- トランザクションをどう扱うかを早期に検討しておく



