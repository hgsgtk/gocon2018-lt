Server Side Architecture Strategy for Beginners
- 社内初導入のGo製APIのサーバサイドアーキテクチャ設計戦略 - #gocon
25 Nov 2018
Tags: go golang architecture

Kazuki Higashiguchi
Server Side Enginner, BASE
higasgt@gmail.com
https://speakerdeck.com/higasgt
@higasgt

* About this talk

- 当初Goを業務初利用するプロジェクトの *サーバーサイドアーキテクチャ* の事例
- サーバーサイドアーキテクチャにまつわる選択肢は多数...
- Clean Onion, Layered, MVC2 ...etc
- 現況に合わせた *段階的な改良* を行っていく

* About me

- Twitter
.link https://twitter.com/higasgt @higasgt
- Kazuki Higashiguchi
- Server Side Enginner (Go, PHP, ...etc)
- BASE, Inc

* Talk Background

- 堅くロジックが書けて、 パフォーマンスがいいものが欲しい
- → Go言語を技術スタックとして採用
- Goを業務でがっつり使用した経験がないチーム状況
- → 開発チームで *統一的な実装方針* を持ちたい
- 新規事業につき業務要件も変わりうる
- → 入出力とビジネスロジックを分離し、*変更容易な設計* を保ちたい

* Definition of Server Side Architecture

- レイヤ構造の検討
- Layered, Clean, Onion ...etc

レイヤ構造

- 普遍的な責務を持つパッケージ
- 依存関係を単一方向に統一
- レイヤ内の凝縮度を高める

* Problem of choose architecture

- 理想的には最適な構造を最初から決めたい
- 現実的には、ノウハウ・スキル・要件の見通しが *十分に出揃わない*
- *チーム状況・要件に応じて最適なものは異なる* ため、ネット上に公開されているものをそのまま使えばいいわけではない。
- → *実践しながら掴んでいく* しか無い

* How to proceeding

- おそらく理想らしきレイヤ概念を仮定義して構想を共有
- どう実装に落とし込んでいくかを探っていく（DI戦略など）
- *「作っては壊しを繰り返す」* ことを共通認識として宣言しておく
- *身の丈×120%* 、現状のチームの平均スキルの120%で実践できる構造へ

* How to proceeding: Initial view

.image architecture/arch-design.svg

* How to proceeding: Unit testing
- 「ユニットテストを書く」ことに対する *意味付け* をする
- テストを書くことで、*結合度* など設計に対するフィードバックを得る
- 「作っては壊す」といった *大胆なリファクタリング* を可能にするため
- 「テストがかきやすければいい」わけではない
- → *それぞれのレイヤに期待する責務* は別途ドキュメントで明記

* How to proceeding: package
- なるべく *標準パッケージ* を利用する
- *Go言語自体を覚えれば書ける* 状態にするため
- interfaceの使い方など *「Goらしく」* 実装するために必要な技法を理解するため
- 理解度に合わせて「便利になる」ライブラリ・機構を導入・準備していく

* Transition of architecture

* Initial arch Simple Model-Controller
.code architecture/initial.txt
- controllerとmodelしかないシンプルな構成
- サンプルコードも用意、GoのAPI開発に慣れる
- 密にmodel内にデータベースを扱うなどの技術的実装も含めている状態

* Second arch Model-Controller + DIP
.code architecture/second.txt
- ドメイン層に存在していた技術的実装を分離する
- 抽象的にデータ操作を扱うrepositoryを挟み、技術的な実装はdatastoreパッケージに移動
- interfaceの使い方をここで慣れてもらい、ユニットテスト時には自前でモック実装を実装してもらい流れを掴む

* Third arch Layered Arch + DIP

.code architecture/third.txt

- 処理の複雑化に伴いapplication layerに該当するserviceパッケージを導入
- トランザクションを扱う際の実装方法を共有
- ユニットテスト時のモック量が増えてくるのに伴い、GoMockの利用を開始する
.link https://github.com/golang/mock github.com/golang/mock

* Current Layered Arch + DIP

.code architecture/final.txt

- 全レイヤ共通で利用するUUID生成などを `common` ディレクトリに集約
- テストヘルパー群を `testutil` packageに集約

* Reflection

* Reflection 1. transactionの扱い方は早めに考えておく

.code architecture/transaction.go

- トランザクションをどう扱うかによって、Interfaceが変わってくる。

* Reflection 1. transactionの扱い方は早めに考えておく

.code architecture/repository.go

- 本ケースでは、*sql.DB/Txをwrapした抽象型を引数に定義
.link https://speakerdeck.com/codehex/mou-du-tesutopatanwozheng-li-siyou-webappbian もう一度テストパターンを整理しよう(WebApp編)

* Reflection 2. test helperを先回りして用意
- *ユニットテストを愚直に書く* は理解のために有効だった
- 途中からコピペ作業になってしまうタイミングがある
- 「テストを書くのが億劫になる」
- 毎回assertionするコードを共通化する *テストヘルパー* の提供を早めにしておくのがベター

.code architecture/testhelper.go

* Summary

- 最終的な構造を仮定義し、徐々に *チームのスキル向上* を伴いながら近づけていく
- 実装しないとわからない肌感の量を増やすため *ユニットテスト* をしっかり書いていく

Good point

- 徐々に拡張していくことでその時点での *キャッチアップコスト* が下げられた
- ユニットテストによって *リファクタリング* が容易であった

Room for improvement

- チームの実装状況に対して先回りしないと *リファクタリング工数* が大きくなる

* References

.link https://speakerdeck.com/deadcheat/thinking-about-patterns-for-packages-in-go Thinking about patterns for packages in Go
.link https://www.slideshare.net/pospome/go-80591000 Goのサーバサイド実装におけるレイヤ設計とレイヤ内実装について考える
.link https://speakerdeck.com/mercari/ja-golang-package-composition-for-web-application-the-case-of-mercari-kauru Golang Package Composition for Web Application: The Case of Mercari Kauru
.link https://postd.cc/is-go-object-oriented/ Goはオブジェクト指向言語だろうか？
.link https://speakerdeck.com/codehex/mou-du-tesutopatanwozheng-li-siyou-webappbian もう一度テストパターンを整理しよう(WebApp編)
.link https://medium.com/@hatajoe/clean-architecture-in-go-4030f11ec1b1 Clean Architecture in Go
